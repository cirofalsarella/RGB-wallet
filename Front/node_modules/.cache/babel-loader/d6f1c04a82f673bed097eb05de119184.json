{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/mnt/d/Projects/Jr/RGBWallet/Front/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n/*import express from 'express';\nimport bodyParser from 'body-parser';\n\nconst server = express();\nserver.use(budyParser.urlencoded({extended: true}));\nserver.use(bodyParser.json())\n\nlet users = [];                     //lista de usuarios\n\n//************  C.R.U.D ************\n\n//Funcao que retorna todos os usuarios\nserver.get(\"/Users\", (req,res) => {\n  return res.status(200).send(users);   //retorna toda a lista de usuarios\n})\n\n//Funcao que retorna um usuario\nserver.get(\"/Users/UserName\", (req,res) => {\n  const user_name = req.params.user_name;       //pega o username para fazer a busca\n  let searched_user;                            //variavel que salvara o usuario buscado\n\n  users.array.forEach(user => {                 //loop que passa por cada usuario \n    if(user.user_name === user_name){           //caso os nomes de usuarios batam, do loop com o do requirido\n      searched_user = user;                     //salva o usuario\n    }\n\n    return res.status(200).send(searched_user); //retorna o usuario\n  })\n\n})\n\n//Funcao que adiciona um usuario\nserver.post(\"/Users\", (req,res) => {\n  const user_name = req.body.user_name;       //armazena o username\n  const name = req.body.name;                 //o nome do usuario\n  const weeks_10h = req.body.weeks_10h;       //quantas semanas trabalhou por 10h\n  const sold = false;                         //se vendeu projeto*******\n  const working = false;                      //se esta trabalhando em algum projeto********\n  const sum = \"0\";                            //saldo\n\n  if(req.body.sold == \"true\"){                //ainda nao sei trabalho com boolean entao assumo que ele le um string \n    sold = true;                              //entao transformo em boolean para ser armazenado\n  }\n  if(req.body.working == \"true\"){\n    working = true;\n  }\n  \n\n  const user = {user_name, name, sold, working, weeks_10h, sum} //cria o usuario com os dados coletados\n  users.push(user);                                             //insere na lista\n\n  return res.status(202).send(user);                            //retorna o usuario adicionado\n})\n\n//Funcao que atualiza um usuario\nserver.put(\"/Users/UserName\", (req,res) => {\n  const user_name = req.params.user_name;                                 //username a ser atualizado\n  const {user_name, name, sold, working, weeks_10h, sum} = req.body;      //info do usuario atualizado\n  let new_users = [];                                                     //nova lista com o usuario atualizado\n  const updated_user = {user_name, name, sold, working, weeks_10h, sum}   //usuario atualizado\n\n  users.array.forEach(user => {                           //loop que adiciona os usuarios na nova lista\n    if(user.user_name === user_name){                     //se for igual ao username \n      new_users.push(updated_user);                       //adiciona o atualizado\n    }\n    else{                                                 //caso contrario\n      new_users.push(user);                               //adiciona o antigo\n    }        \n  })\n\n  users = new_users;                            //atualiza a lista\n\n  return res.status(200).send(updated_user);    //retorna o usuario atualizado\n\n})\n\n//Funcao que deleta um usuario\nserver.delete(\"/Users/UserName\", (req,res) => {\n  const user_name = req.params.user_name;         //username do usuario a ser deletado\n  let new_users = [];                             //nova lista de usuarios\n  \n  users.array.forEach(user => {                   //loop que passa por toda a lista\n    if(user.user_name !== user_name){             //caso os usernames sejam diferentes\n      new_users.push(user);                       //adiciona na lista excluindo assim somente o usario deletado\n    }\n       \n  })\n\n  users = new_users;                      //atualiza a lista\n\n  return res.status(200).send(users);     //retorna a lista atualizada\n})\n\n/*\n*Ainda falta fazer a atualização do saldo\n*atualização do sistema com o mes passa, setando as weeks_10h para zero\n*zerar os saldos\n*/\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 105,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/mnt/d/Projects/Jr/RGBWallet/Front/src/index.js"],"names":["React","ReactDOM","App","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAheACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QADF,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n/*import express from 'express';\nimport bodyParser from 'body-parser';\n\nconst server = express();\nserver.use(budyParser.urlencoded({extended: true}));\nserver.use(bodyParser.json())\n\nlet users = [];                     //lista de usuarios\n\n//************  C.R.U.D ************\n\n//Funcao que retorna todos os usuarios\nserver.get(\"/Users\", (req,res) => {\n  return res.status(200).send(users);   //retorna toda a lista de usuarios\n})\n\n//Funcao que retorna um usuario\nserver.get(\"/Users/UserName\", (req,res) => {\n  const user_name = req.params.user_name;       //pega o username para fazer a busca\n  let searched_user;                            //variavel que salvara o usuario buscado\n\n  users.array.forEach(user => {                 //loop que passa por cada usuario \n    if(user.user_name === user_name){           //caso os nomes de usuarios batam, do loop com o do requirido\n      searched_user = user;                     //salva o usuario\n    }\n\n    return res.status(200).send(searched_user); //retorna o usuario\n  })\n\n})\n\n//Funcao que adiciona um usuario\nserver.post(\"/Users\", (req,res) => {\n  const user_name = req.body.user_name;       //armazena o username\n  const name = req.body.name;                 //o nome do usuario\n  const weeks_10h = req.body.weeks_10h;       //quantas semanas trabalhou por 10h\n  const sold = false;                         //se vendeu projeto*******\n  const working = false;                      //se esta trabalhando em algum projeto********\n  const sum = \"0\";                            //saldo\n\n  if(req.body.sold == \"true\"){                //ainda nao sei trabalho com boolean entao assumo que ele le um string \n    sold = true;                              //entao transformo em boolean para ser armazenado\n  }\n  if(req.body.working == \"true\"){\n    working = true;\n  }\n  \n\n  const user = {user_name, name, sold, working, weeks_10h, sum} //cria o usuario com os dados coletados\n  users.push(user);                                             //insere na lista\n\n  return res.status(202).send(user);                            //retorna o usuario adicionado\n})\n\n//Funcao que atualiza um usuario\nserver.put(\"/Users/UserName\", (req,res) => {\n  const user_name = req.params.user_name;                                 //username a ser atualizado\n  const {user_name, name, sold, working, weeks_10h, sum} = req.body;      //info do usuario atualizado\n  let new_users = [];                                                     //nova lista com o usuario atualizado\n  const updated_user = {user_name, name, sold, working, weeks_10h, sum}   //usuario atualizado\n\n  users.array.forEach(user => {                           //loop que adiciona os usuarios na nova lista\n    if(user.user_name === user_name){                     //se for igual ao username \n      new_users.push(updated_user);                       //adiciona o atualizado\n    }\n    else{                                                 //caso contrario\n      new_users.push(user);                               //adiciona o antigo\n    }        \n  })\n\n  users = new_users;                            //atualiza a lista\n\n  return res.status(200).send(updated_user);    //retorna o usuario atualizado\n\n})\n\n//Funcao que deleta um usuario\nserver.delete(\"/Users/UserName\", (req,res) => {\n  const user_name = req.params.user_name;         //username do usuario a ser deletado\n  let new_users = [];                             //nova lista de usuarios\n  \n  users.array.forEach(user => {                   //loop que passa por toda a lista\n    if(user.user_name !== user_name){             //caso os usernames sejam diferentes\n      new_users.push(user);                       //adiciona na lista excluindo assim somente o usario deletado\n    }\n       \n  })\n\n  users = new_users;                      //atualiza a lista\n\n  return res.status(200).send(users);     //retorna a lista atualizada\n})\n\n/*\n*Ainda falta fazer a atualização do saldo\n*atualização do sistema com o mes passa, setando as weeks_10h para zero\n*zerar os saldos\n*/\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}